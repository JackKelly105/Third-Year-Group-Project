<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        A3//2Q==
</value>
  </data>
</root>